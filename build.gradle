buildscript {
    dependencies {
        classpath 'com.velox:velox-gradle-plugin:0.8.0+'
    }
}

plugins {
    id 'java'
    id 'application'
    id 'idea'
}

apply plugin: 'com.velox.velox-gradle-plugin'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url velox_repo_url
        credentials {
            username velox_repo_user
            password velox_repo_password
        }
    }
}

dependencies {
    implementation 'com.velox:velox-framework:2.4.0+'
    runtimeOnly 'ch.qos.logback:logback-classic:1.2.11'
}

application {
    mainClass.set('com.velox.starter.Application')
    applicationDefaultJvmArgs = [
            '-Dfile.encoding=UTF-8',
    ]
}

/**
 * Customize the start script generated by the application plugin to shorten
 * the classpath by pointing to the lib folder rather than listing individual
 * jars one by one. The latter usually has an issue on Windows where the
 * command argument length is limited
 */
startScripts {
    classpath = files('$APP_HOME/lib/*')
}

/**
 * Package the src/main/webapp folder into the distribution zip as the folder
 * contains web related resource files.
 */
distributions {
    main {
        contents {
            from 'src/main/webapp', {
                into 'src/main/webapp'
            }
        }
    }
}

/**
 * Development server setup
 */
tasks.register('dev', JavaExec.class) {
    group "application"
    description "run application in development mode"

    mainClass.set('com.velox.starter.Application')
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs '-Dfile.encoding=UTF-8'
    jvmArgs '-Dvelox.environment=development'
}

/**
 * Extract the Velox bundled web resources into a local folder.
 * The folder ${project.buildDir}/extracted-included-webapp can then be added to
 * the application as additional web roots, hence the application can disable classpath
 * scanning when serving static resources. This helps Windows user to have faster
 * load time when starting/re-starting the application by avoiding unpacking jars
 * at runtime.
 */
tasks.register('extractWebResources', Copy.class) {
    into("${project.buildDir}/extracted-included-webapp")
    into('.') { spec ->
        configurations.runtimeClasspath.asFileTree.matching {
            include "**/*velox-*.jar"
        }.forEach {
            spec.from(zipTree(it)) {
                include "src/main/webapp/**"
            }

        }
    }
}

tasks.classes.dependsOn extractWebResources

idea.module {
    excludeDirs += file('.vertx')
    excludeDirs += file('.local')
    downloadJavadoc = true
}
